/* automatically generated by rust-bindgen 0.72.0 */

#![allow(bad_style, clippy::pub_underscore_fields, clippy::unreadable_literal, clippy::use_self)]

use std::ffi;

#[cfg_attr(target_os = "linux", link(name = "glfw", kind = "dylib"))]
#[cfg_attr(target_os = "windows", link(name = "glfw3dll", kind = "dylib"))]
unsafe extern "C" {}

pub const _STDINT_H: i32 = 1;
pub const _FEATURES_H: i32 = 1;
pub const _DEFAULT_SOURCE: i32 = 1;
pub const __GLIBC_USE_ISOC2Y: i32 = 0;
pub const __GLIBC_USE_ISOC23: i32 = 0;
pub const __USE_ISOC11: i32 = 1;
pub const __USE_ISOC99: i32 = 1;
pub const __USE_ISOC95: i32 = 1;
pub const __USE_POSIX_IMPLICITLY: i32 = 1;
pub const _POSIX_SOURCE: i32 = 1;
pub const _POSIX_C_SOURCE: i32 = 200809;
pub const __USE_POSIX: i32 = 1;
pub const __USE_POSIX2: i32 = 1;
pub const __USE_POSIX199309: i32 = 1;
pub const __USE_POSIX199506: i32 = 1;
pub const __USE_XOPEN2K: i32 = 1;
pub const __USE_XOPEN2K8: i32 = 1;
pub const _ATFILE_SOURCE: i32 = 1;
pub const __WORDSIZE: i32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: i32 = 1;
pub const __SYSCALL_WORDSIZE: i32 = 64;
pub const __TIMESIZE: i32 = 64;
pub const __USE_TIME_BITS64: i32 = 1;
pub const __USE_MISC: i32 = 1;
pub const __USE_ATFILE: i32 = 1;
pub const __USE_FORTIFY_LEVEL: i32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: i32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: i32 = 0;
pub const __GLIBC_USE_C23_STRTOL: i32 = 0;
pub const _STDC_PREDEF_H: i32 = 1;
pub const __STDC_IEC_559__: i32 = 1;
pub const __STDC_IEC_60559_BFP__: i32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: i32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: i32 = 201404;
pub const __STDC_ISO_10646__: i32 = 201706;
pub const __GNU_LIBRARY__: i32 = 6;
pub const __GLIBC__: i32 = 2;
pub const __GLIBC_MINOR__: i32 = 41;
pub const _SYS_CDEFS_H: i32 = 1;
pub const __glibc_c99_flexarr_available: i32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: i32 = 0;
pub const __HAVE_GENERIC_SELECTION: i32 = 1;
pub const __GLIBC_USE_LIB_EXT2: i32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: i32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C23: i32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: i32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: i32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C23: i32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: i32 = 0;
pub const _BITS_TYPES_H: i32 = 1;
pub const _BITS_TYPESIZES_H: i32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: i32 = 1;
pub const __INO_T_MATCHES_INO64_T: i32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: i32 = 1;
pub const __STATFS_MATCHES_STATFS64: i32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: i32 = 1;
pub const __FD_SETSIZE: i32 = 1024;
pub const _BITS_TIME64_H: i32 = 1;
pub const _BITS_WCHAR_H: i32 = 1;
pub const _BITS_STDINT_INTN_H: i32 = 1;
pub const _BITS_STDINT_UINTN_H: i32 = 1;
pub const _BITS_STDINT_LEAST_H: i32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: i32 = 127;
pub const INT16_MAX: i32 = 32767;
pub const INT32_MAX: i32 = 2147483647;
pub const UINT8_MAX: i32 = 255;
pub const UINT16_MAX: i32 = 65535;
pub const UINT32_MAX: i64 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: i32 = 127;
pub const INT_LEAST16_MAX: i32 = 32767;
pub const INT_LEAST32_MAX: i32 = 2147483647;
pub const UINT_LEAST8_MAX: i32 = 255;
pub const UINT_LEAST16_MAX: i32 = 65535;
pub const UINT_LEAST32_MAX: i64 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: i32 = 127;
pub const INT_FAST16_MAX: i64 = 9223372036854775807;
pub const INT_FAST32_MAX: i64 = 9223372036854775807;
pub const UINT_FAST8_MAX: i32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: i64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: i64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: i32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = 0;
pub const WINT_MAX: i64 = 4294967295;
pub const GLFW_VERSION_MAJOR: i32 = 3;
pub const GLFW_VERSION_MINOR: i32 = 4;
pub const GLFW_VERSION_REVISION: i32 = 0;
pub const GLFW_TRUE: i32 = 1;
pub const GLFW_FALSE: i32 = 0;
pub const GLFW_RELEASE: i32 = 0;
pub const GLFW_PRESS: i32 = 1;
pub const GLFW_REPEAT: i32 = 2;
pub const GLFW_HAT_CENTERED: i32 = 0;
pub const GLFW_HAT_UP: i32 = 1;
pub const GLFW_HAT_RIGHT: i32 = 2;
pub const GLFW_HAT_DOWN: i32 = 4;
pub const GLFW_HAT_LEFT: i32 = 8;
pub const GLFW_HAT_RIGHT_UP: i32 = 3;
pub const GLFW_HAT_RIGHT_DOWN: i32 = 6;
pub const GLFW_HAT_LEFT_UP: i32 = 9;
pub const GLFW_HAT_LEFT_DOWN: i32 = 12;
pub const GLFW_KEY_UNKNOWN: i32 = -1;
pub const GLFW_KEY_SPACE: i32 = 32;
pub const GLFW_KEY_APOSTROPHE: i32 = 39;
pub const GLFW_KEY_COMMA: i32 = 44;
pub const GLFW_KEY_MINUS: i32 = 45;
pub const GLFW_KEY_PERIOD: i32 = 46;
pub const GLFW_KEY_SLASH: i32 = 47;
pub const GLFW_KEY_0: i32 = 48;
pub const GLFW_KEY_1: i32 = 49;
pub const GLFW_KEY_2: i32 = 50;
pub const GLFW_KEY_3: i32 = 51;
pub const GLFW_KEY_4: i32 = 52;
pub const GLFW_KEY_5: i32 = 53;
pub const GLFW_KEY_6: i32 = 54;
pub const GLFW_KEY_7: i32 = 55;
pub const GLFW_KEY_8: i32 = 56;
pub const GLFW_KEY_9: i32 = 57;
pub const GLFW_KEY_SEMICOLON: i32 = 59;
pub const GLFW_KEY_EQUAL: i32 = 61;
pub const GLFW_KEY_A: i32 = 65;
pub const GLFW_KEY_B: i32 = 66;
pub const GLFW_KEY_C: i32 = 67;
pub const GLFW_KEY_D: i32 = 68;
pub const GLFW_KEY_E: i32 = 69;
pub const GLFW_KEY_F: i32 = 70;
pub const GLFW_KEY_G: i32 = 71;
pub const GLFW_KEY_H: i32 = 72;
pub const GLFW_KEY_I: i32 = 73;
pub const GLFW_KEY_J: i32 = 74;
pub const GLFW_KEY_K: i32 = 75;
pub const GLFW_KEY_L: i32 = 76;
pub const GLFW_KEY_M: i32 = 77;
pub const GLFW_KEY_N: i32 = 78;
pub const GLFW_KEY_O: i32 = 79;
pub const GLFW_KEY_P: i32 = 80;
pub const GLFW_KEY_Q: i32 = 81;
pub const GLFW_KEY_R: i32 = 82;
pub const GLFW_KEY_S: i32 = 83;
pub const GLFW_KEY_T: i32 = 84;
pub const GLFW_KEY_U: i32 = 85;
pub const GLFW_KEY_V: i32 = 86;
pub const GLFW_KEY_W: i32 = 87;
pub const GLFW_KEY_X: i32 = 88;
pub const GLFW_KEY_Y: i32 = 89;
pub const GLFW_KEY_Z: i32 = 90;
pub const GLFW_KEY_LEFT_BRACKET: i32 = 91;
pub const GLFW_KEY_BACKSLASH: i32 = 92;
pub const GLFW_KEY_RIGHT_BRACKET: i32 = 93;
pub const GLFW_KEY_GRAVE_ACCENT: i32 = 96;
pub const GLFW_KEY_WORLD_1: i32 = 161;
pub const GLFW_KEY_WORLD_2: i32 = 162;
pub const GLFW_KEY_ESCAPE: i32 = 256;
pub const GLFW_KEY_ENTER: i32 = 257;
pub const GLFW_KEY_TAB: i32 = 258;
pub const GLFW_KEY_BACKSPACE: i32 = 259;
pub const GLFW_KEY_INSERT: i32 = 260;
pub const GLFW_KEY_DELETE: i32 = 261;
pub const GLFW_KEY_RIGHT: i32 = 262;
pub const GLFW_KEY_LEFT: i32 = 263;
pub const GLFW_KEY_DOWN: i32 = 264;
pub const GLFW_KEY_UP: i32 = 265;
pub const GLFW_KEY_PAGE_UP: i32 = 266;
pub const GLFW_KEY_PAGE_DOWN: i32 = 267;
pub const GLFW_KEY_HOME: i32 = 268;
pub const GLFW_KEY_END: i32 = 269;
pub const GLFW_KEY_CAPS_LOCK: i32 = 280;
pub const GLFW_KEY_SCROLL_LOCK: i32 = 281;
pub const GLFW_KEY_NUM_LOCK: i32 = 282;
pub const GLFW_KEY_PRINT_SCREEN: i32 = 283;
pub const GLFW_KEY_PAUSE: i32 = 284;
pub const GLFW_KEY_F1: i32 = 290;
pub const GLFW_KEY_F2: i32 = 291;
pub const GLFW_KEY_F3: i32 = 292;
pub const GLFW_KEY_F4: i32 = 293;
pub const GLFW_KEY_F5: i32 = 294;
pub const GLFW_KEY_F6: i32 = 295;
pub const GLFW_KEY_F7: i32 = 296;
pub const GLFW_KEY_F8: i32 = 297;
pub const GLFW_KEY_F9: i32 = 298;
pub const GLFW_KEY_F10: i32 = 299;
pub const GLFW_KEY_F11: i32 = 300;
pub const GLFW_KEY_F12: i32 = 301;
pub const GLFW_KEY_F13: i32 = 302;
pub const GLFW_KEY_F14: i32 = 303;
pub const GLFW_KEY_F15: i32 = 304;
pub const GLFW_KEY_F16: i32 = 305;
pub const GLFW_KEY_F17: i32 = 306;
pub const GLFW_KEY_F18: i32 = 307;
pub const GLFW_KEY_F19: i32 = 308;
pub const GLFW_KEY_F20: i32 = 309;
pub const GLFW_KEY_F21: i32 = 310;
pub const GLFW_KEY_F22: i32 = 311;
pub const GLFW_KEY_F23: i32 = 312;
pub const GLFW_KEY_F24: i32 = 313;
pub const GLFW_KEY_F25: i32 = 314;
pub const GLFW_KEY_KP_0: i32 = 320;
pub const GLFW_KEY_KP_1: i32 = 321;
pub const GLFW_KEY_KP_2: i32 = 322;
pub const GLFW_KEY_KP_3: i32 = 323;
pub const GLFW_KEY_KP_4: i32 = 324;
pub const GLFW_KEY_KP_5: i32 = 325;
pub const GLFW_KEY_KP_6: i32 = 326;
pub const GLFW_KEY_KP_7: i32 = 327;
pub const GLFW_KEY_KP_8: i32 = 328;
pub const GLFW_KEY_KP_9: i32 = 329;
pub const GLFW_KEY_KP_DECIMAL: i32 = 330;
pub const GLFW_KEY_KP_DIVIDE: i32 = 331;
pub const GLFW_KEY_KP_MULTIPLY: i32 = 332;
pub const GLFW_KEY_KP_SUBTRACT: i32 = 333;
pub const GLFW_KEY_KP_ADD: i32 = 334;
pub const GLFW_KEY_KP_ENTER: i32 = 335;
pub const GLFW_KEY_KP_EQUAL: i32 = 336;
pub const GLFW_KEY_LEFT_SHIFT: i32 = 340;
pub const GLFW_KEY_LEFT_CONTROL: i32 = 341;
pub const GLFW_KEY_LEFT_ALT: i32 = 342;
pub const GLFW_KEY_LEFT_SUPER: i32 = 343;
pub const GLFW_KEY_RIGHT_SHIFT: i32 = 344;
pub const GLFW_KEY_RIGHT_CONTROL: i32 = 345;
pub const GLFW_KEY_RIGHT_ALT: i32 = 346;
pub const GLFW_KEY_RIGHT_SUPER: i32 = 347;
pub const GLFW_KEY_MENU: i32 = 348;
pub const GLFW_KEY_LAST: i32 = 348;
pub const GLFW_MOD_SHIFT: i32 = 1;
pub const GLFW_MOD_CONTROL: i32 = 2;
pub const GLFW_MOD_ALT: i32 = 4;
pub const GLFW_MOD_SUPER: i32 = 8;
pub const GLFW_MOD_CAPS_LOCK: i32 = 16;
pub const GLFW_MOD_NUM_LOCK: i32 = 32;
pub const GLFW_MOUSE_BUTTON_1: i32 = 0;
pub const GLFW_MOUSE_BUTTON_2: i32 = 1;
pub const GLFW_MOUSE_BUTTON_3: i32 = 2;
pub const GLFW_MOUSE_BUTTON_4: i32 = 3;
pub const GLFW_MOUSE_BUTTON_5: i32 = 4;
pub const GLFW_MOUSE_BUTTON_6: i32 = 5;
pub const GLFW_MOUSE_BUTTON_7: i32 = 6;
pub const GLFW_MOUSE_BUTTON_8: i32 = 7;
pub const GLFW_MOUSE_BUTTON_LAST: i32 = 7;
pub const GLFW_MOUSE_BUTTON_LEFT: i32 = 0;
pub const GLFW_MOUSE_BUTTON_RIGHT: i32 = 1;
pub const GLFW_MOUSE_BUTTON_MIDDLE: i32 = 2;
pub const GLFW_JOYSTICK_1: i32 = 0;
pub const GLFW_JOYSTICK_2: i32 = 1;
pub const GLFW_JOYSTICK_3: i32 = 2;
pub const GLFW_JOYSTICK_4: i32 = 3;
pub const GLFW_JOYSTICK_5: i32 = 4;
pub const GLFW_JOYSTICK_6: i32 = 5;
pub const GLFW_JOYSTICK_7: i32 = 6;
pub const GLFW_JOYSTICK_8: i32 = 7;
pub const GLFW_JOYSTICK_9: i32 = 8;
pub const GLFW_JOYSTICK_10: i32 = 9;
pub const GLFW_JOYSTICK_11: i32 = 10;
pub const GLFW_JOYSTICK_12: i32 = 11;
pub const GLFW_JOYSTICK_13: i32 = 12;
pub const GLFW_JOYSTICK_14: i32 = 13;
pub const GLFW_JOYSTICK_15: i32 = 14;
pub const GLFW_JOYSTICK_16: i32 = 15;
pub const GLFW_JOYSTICK_LAST: i32 = 15;
pub const GLFW_GAMEPAD_BUTTON_A: i32 = 0;
pub const GLFW_GAMEPAD_BUTTON_B: i32 = 1;
pub const GLFW_GAMEPAD_BUTTON_X: i32 = 2;
pub const GLFW_GAMEPAD_BUTTON_Y: i32 = 3;
pub const GLFW_GAMEPAD_BUTTON_LEFT_BUMPER: i32 = 4;
pub const GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER: i32 = 5;
pub const GLFW_GAMEPAD_BUTTON_BACK: i32 = 6;
pub const GLFW_GAMEPAD_BUTTON_START: i32 = 7;
pub const GLFW_GAMEPAD_BUTTON_GUIDE: i32 = 8;
pub const GLFW_GAMEPAD_BUTTON_LEFT_THUMB: i32 = 9;
pub const GLFW_GAMEPAD_BUTTON_RIGHT_THUMB: i32 = 10;
pub const GLFW_GAMEPAD_BUTTON_DPAD_UP: i32 = 11;
pub const GLFW_GAMEPAD_BUTTON_DPAD_RIGHT: i32 = 12;
pub const GLFW_GAMEPAD_BUTTON_DPAD_DOWN: i32 = 13;
pub const GLFW_GAMEPAD_BUTTON_DPAD_LEFT: i32 = 14;
pub const GLFW_GAMEPAD_BUTTON_LAST: i32 = 14;
pub const GLFW_GAMEPAD_BUTTON_CROSS: i32 = 0;
pub const GLFW_GAMEPAD_BUTTON_CIRCLE: i32 = 1;
pub const GLFW_GAMEPAD_BUTTON_SQUARE: i32 = 2;
pub const GLFW_GAMEPAD_BUTTON_TRIANGLE: i32 = 3;
pub const GLFW_GAMEPAD_AXIS_LEFT_X: i32 = 0;
pub const GLFW_GAMEPAD_AXIS_LEFT_Y: i32 = 1;
pub const GLFW_GAMEPAD_AXIS_RIGHT_X: i32 = 2;
pub const GLFW_GAMEPAD_AXIS_RIGHT_Y: i32 = 3;
pub const GLFW_GAMEPAD_AXIS_LEFT_TRIGGER: i32 = 4;
pub const GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER: i32 = 5;
pub const GLFW_GAMEPAD_AXIS_LAST: i32 = 5;
pub const GLFW_NO_ERROR: i32 = 0;
pub const GLFW_NOT_INITIALIZED: i32 = 65537;
pub const GLFW_NO_CURRENT_CONTEXT: i32 = 65538;
pub const GLFW_INVALID_ENUM: i32 = 65539;
pub const GLFW_INVALID_VALUE: i32 = 65540;
pub const GLFW_OUT_OF_MEMORY: i32 = 65541;
pub const GLFW_API_UNAVAILABLE: i32 = 65542;
pub const GLFW_VERSION_UNAVAILABLE: i32 = 65543;
pub const GLFW_PLATFORM_ERROR: i32 = 65544;
pub const GLFW_FORMAT_UNAVAILABLE: i32 = 65545;
pub const GLFW_NO_WINDOW_CONTEXT: i32 = 65546;
pub const GLFW_CURSOR_UNAVAILABLE: i32 = 65547;
pub const GLFW_FEATURE_UNAVAILABLE: i32 = 65548;
pub const GLFW_FEATURE_UNIMPLEMENTED: i32 = 65549;
pub const GLFW_PLATFORM_UNAVAILABLE: i32 = 65550;
pub const GLFW_FOCUSED: i32 = 131073;
pub const GLFW_ICONIFIED: i32 = 131074;
pub const GLFW_RESIZABLE: i32 = 131075;
pub const GLFW_VISIBLE: i32 = 131076;
pub const GLFW_DECORATED: i32 = 131077;
pub const GLFW_AUTO_ICONIFY: i32 = 131078;
pub const GLFW_FLOATING: i32 = 131079;
pub const GLFW_MAXIMIZED: i32 = 131080;
pub const GLFW_CENTER_CURSOR: i32 = 131081;
pub const GLFW_TRANSPARENT_FRAMEBUFFER: i32 = 131082;
pub const GLFW_HOVERED: i32 = 131083;
pub const GLFW_FOCUS_ON_SHOW: i32 = 131084;
pub const GLFW_MOUSE_PASSTHROUGH: i32 = 131085;
pub const GLFW_POSITION_X: i32 = 131086;
pub const GLFW_POSITION_Y: i32 = 131087;
pub const GLFW_RED_BITS: i32 = 135169;
pub const GLFW_GREEN_BITS: i32 = 135170;
pub const GLFW_BLUE_BITS: i32 = 135171;
pub const GLFW_ALPHA_BITS: i32 = 135172;
pub const GLFW_DEPTH_BITS: i32 = 135173;
pub const GLFW_STENCIL_BITS: i32 = 135174;
pub const GLFW_ACCUM_RED_BITS: i32 = 135175;
pub const GLFW_ACCUM_GREEN_BITS: i32 = 135176;
pub const GLFW_ACCUM_BLUE_BITS: i32 = 135177;
pub const GLFW_ACCUM_ALPHA_BITS: i32 = 135178;
pub const GLFW_AUX_BUFFERS: i32 = 135179;
pub const GLFW_STEREO: i32 = 135180;
pub const GLFW_SAMPLES: i32 = 135181;
pub const GLFW_SRGB_CAPABLE: i32 = 135182;
pub const GLFW_REFRESH_RATE: i32 = 135183;
pub const GLFW_DOUBLEBUFFER: i32 = 135184;
pub const GLFW_CLIENT_API: i32 = 139265;
pub const GLFW_CONTEXT_VERSION_MAJOR: i32 = 139266;
pub const GLFW_CONTEXT_VERSION_MINOR: i32 = 139267;
pub const GLFW_CONTEXT_REVISION: i32 = 139268;
pub const GLFW_CONTEXT_ROBUSTNESS: i32 = 139269;
pub const GLFW_OPENGL_FORWARD_COMPAT: i32 = 139270;
pub const GLFW_CONTEXT_DEBUG: i32 = 139271;
pub const GLFW_OPENGL_DEBUG_CONTEXT: i32 = 139271;
pub const GLFW_OPENGL_PROFILE: i32 = 139272;
pub const GLFW_CONTEXT_RELEASE_BEHAVIOR: i32 = 139273;
pub const GLFW_CONTEXT_NO_ERROR: i32 = 139274;
pub const GLFW_CONTEXT_CREATION_API: i32 = 139275;
pub const GLFW_SCALE_TO_MONITOR: i32 = 139276;
pub const GLFW_SCALE_FRAMEBUFFER: i32 = 139277;
pub const GLFW_COCOA_RETINA_FRAMEBUFFER: i32 = 143361;
pub const GLFW_COCOA_FRAME_NAME: i32 = 143362;
pub const GLFW_COCOA_GRAPHICS_SWITCHING: i32 = 143363;
pub const GLFW_X11_CLASS_NAME: i32 = 147457;
pub const GLFW_X11_INSTANCE_NAME: i32 = 147458;
pub const GLFW_WIN32_KEYBOARD_MENU: i32 = 151553;
pub const GLFW_WIN32_SHOWDEFAULT: i32 = 151554;
pub const GLFW_WAYLAND_APP_ID: i32 = 155649;
pub const GLFW_NO_API: i32 = 0;
pub const GLFW_OPENGL_API: i32 = 196609;
pub const GLFW_OPENGL_ES_API: i32 = 196610;
pub const GLFW_NO_ROBUSTNESS: i32 = 0;
pub const GLFW_NO_RESET_NOTIFICATION: i32 = 200705;
pub const GLFW_LOSE_CONTEXT_ON_RESET: i32 = 200706;
pub const GLFW_OPENGL_ANY_PROFILE: i32 = 0;
pub const GLFW_OPENGL_CORE_PROFILE: i32 = 204801;
pub const GLFW_OPENGL_COMPAT_PROFILE: i32 = 204802;
pub const GLFW_CURSOR: i32 = 208897;
pub const GLFW_STICKY_KEYS: i32 = 208898;
pub const GLFW_STICKY_MOUSE_BUTTONS: i32 = 208899;
pub const GLFW_LOCK_KEY_MODS: i32 = 208900;
pub const GLFW_RAW_MOUSE_MOTION: i32 = 208901;
pub const GLFW_CURSOR_NORMAL: i32 = 212993;
pub const GLFW_CURSOR_HIDDEN: i32 = 212994;
pub const GLFW_CURSOR_DISABLED: i32 = 212995;
pub const GLFW_CURSOR_CAPTURED: i32 = 212996;
pub const GLFW_ANY_RELEASE_BEHAVIOR: i32 = 0;
pub const GLFW_RELEASE_BEHAVIOR_FLUSH: i32 = 217089;
pub const GLFW_RELEASE_BEHAVIOR_NONE: i32 = 217090;
pub const GLFW_NATIVE_CONTEXT_API: i32 = 221185;
pub const GLFW_EGL_CONTEXT_API: i32 = 221186;
pub const GLFW_OSMESA_CONTEXT_API: i32 = 221187;
pub const GLFW_ANGLE_PLATFORM_TYPE_NONE: i32 = 225281;
pub const GLFW_ANGLE_PLATFORM_TYPE_OPENGL: i32 = 225282;
pub const GLFW_ANGLE_PLATFORM_TYPE_OPENGLES: i32 = 225283;
pub const GLFW_ANGLE_PLATFORM_TYPE_D3D9: i32 = 225284;
pub const GLFW_ANGLE_PLATFORM_TYPE_D3D11: i32 = 225285;
pub const GLFW_ANGLE_PLATFORM_TYPE_VULKAN: i32 = 225287;
pub const GLFW_ANGLE_PLATFORM_TYPE_METAL: i32 = 225288;
pub const GLFW_WAYLAND_PREFER_LIBDECOR: i32 = 229377;
pub const GLFW_WAYLAND_DISABLE_LIBDECOR: i32 = 229378;
pub const GLFW_ANY_POSITION: i64 = 2147483648;
pub const GLFW_ARROW_CURSOR: i32 = 221185;
pub const GLFW_IBEAM_CURSOR: i32 = 221186;
pub const GLFW_CROSSHAIR_CURSOR: i32 = 221187;
pub const GLFW_POINTING_HAND_CURSOR: i32 = 221188;
pub const GLFW_RESIZE_EW_CURSOR: i32 = 221189;
pub const GLFW_RESIZE_NS_CURSOR: i32 = 221190;
pub const GLFW_RESIZE_NWSE_CURSOR: i32 = 221191;
pub const GLFW_RESIZE_NESW_CURSOR: i32 = 221192;
pub const GLFW_RESIZE_ALL_CURSOR: i32 = 221193;
pub const GLFW_NOT_ALLOWED_CURSOR: i32 = 221194;
pub const GLFW_HRESIZE_CURSOR: i32 = 221189;
pub const GLFW_VRESIZE_CURSOR: i32 = 221190;
pub const GLFW_HAND_CURSOR: i32 = 221188;
pub const GLFW_CONNECTED: i32 = 262145;
pub const GLFW_DISCONNECTED: i32 = 262146;
pub const GLFW_JOYSTICK_HAT_BUTTONS: i32 = 327681;
pub const GLFW_ANGLE_PLATFORM_TYPE: i32 = 327682;
pub const GLFW_PLATFORM: i32 = 327683;
pub const GLFW_COCOA_CHDIR_RESOURCES: i32 = 331777;
pub const GLFW_COCOA_MENUBAR: i32 = 331778;
pub const GLFW_X11_XCB_VULKAN_SURFACE: i32 = 335873;
pub const GLFW_WAYLAND_LIBDECOR: i32 = 339969;
pub const GLFW_ANY_PLATFORM: i32 = 393216;
pub const GLFW_PLATFORM_WIN32: i32 = 393217;
pub const GLFW_PLATFORM_COCOA: i32 = 393218;
pub const GLFW_PLATFORM_WAYLAND: i32 = 393219;
pub const GLFW_PLATFORM_X11: i32 = 393220;
pub const GLFW_PLATFORM_NULL: i32 = 393221;
pub const GLFW_DONT_CARE: i32 = -1;
pub type wchar_t = ffi::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ffi::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
pub type __u_char = ffi::c_uchar;
pub type __u_short = ffi::c_ushort;
pub type __u_int = ffi::c_uint;
pub type __u_long = ffi::c_ulong;
pub type __int8_t = ffi::c_schar;
pub type __uint8_t = ffi::c_uchar;
pub type __int16_t = ffi::c_short;
pub type __uint16_t = ffi::c_ushort;
pub type __int32_t = ffi::c_int;
pub type __uint32_t = ffi::c_uint;
pub type __int64_t = ffi::c_long;
pub type __uint64_t = ffi::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ffi::c_long;
pub type __u_quad_t = ffi::c_ulong;
pub type __intmax_t = ffi::c_long;
pub type __uintmax_t = ffi::c_ulong;
pub type __dev_t = ffi::c_ulong;
pub type __uid_t = ffi::c_uint;
pub type __gid_t = ffi::c_uint;
pub type __ino_t = ffi::c_ulong;
pub type __ino64_t = ffi::c_ulong;
pub type __mode_t = ffi::c_uint;
pub type __nlink_t = ffi::c_ulong;
pub type __off_t = ffi::c_long;
pub type __off64_t = ffi::c_long;
pub type __pid_t = ffi::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __fsid_t {
    pub __val: [ffi::c_int; 2usize],
}
pub type __clock_t = ffi::c_long;
pub type __rlim_t = ffi::c_ulong;
pub type __rlim64_t = ffi::c_ulong;
pub type __id_t = ffi::c_uint;
pub type __time_t = ffi::c_long;
pub type __useconds_t = ffi::c_uint;
pub type __suseconds_t = ffi::c_long;
pub type __suseconds64_t = ffi::c_long;
pub type __daddr_t = ffi::c_int;
pub type __key_t = ffi::c_int;
pub type __clockid_t = ffi::c_int;
pub type __timer_t = *mut ffi::c_void;
pub type __blksize_t = ffi::c_long;
pub type __blkcnt_t = ffi::c_long;
pub type __blkcnt64_t = ffi::c_long;
pub type __fsblkcnt_t = ffi::c_ulong;
pub type __fsblkcnt64_t = ffi::c_ulong;
pub type __fsfilcnt_t = ffi::c_ulong;
pub type __fsfilcnt64_t = ffi::c_ulong;
pub type __fsword_t = ffi::c_long;
pub type __ssize_t = ffi::c_long;
pub type __syscall_slong_t = ffi::c_long;
pub type __syscall_ulong_t = ffi::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ffi::c_char;
pub type __intptr_t = ffi::c_long;
pub type __socklen_t = ffi::c_uint;
pub type __sig_atomic_t = ffi::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ffi::c_schar;
pub type int_fast16_t = ffi::c_long;
pub type int_fast32_t = ffi::c_long;
pub type int_fast64_t = ffi::c_long;
pub type uint_fast8_t = ffi::c_uchar;
pub type uint_fast16_t = ffi::c_ulong;
pub type uint_fast32_t = ffi::c_ulong;
pub type uint_fast64_t = ffi::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type GLFWglproc = ::std::option::Option<unsafe extern "C" fn()>;
pub type GLFWvkproc = ::std::option::Option<unsafe extern "C" fn()>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct GLFWmonitor {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct GLFWwindow {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct GLFWcursor {
    _unused: [u8; 0],
}
pub type GLFWallocatefun = ::std::option::Option<
    unsafe extern "C" fn(size: usize, user: *mut ffi::c_void) -> *mut ffi::c_void,
>;
pub type GLFWreallocatefun = ::std::option::Option<
    unsafe extern "C" fn(
        block: *mut ffi::c_void,
        size: usize,
        user: *mut ffi::c_void,
    ) -> *mut ffi::c_void,
>;
pub type GLFWdeallocatefun =
    ::std::option::Option<unsafe extern "C" fn(block: *mut ffi::c_void, user: *mut ffi::c_void)>;
pub type GLFWerrorfun = ::std::option::Option<
    unsafe extern "C" fn(error_code: ffi::c_int, description: *const ffi::c_char),
>;
pub type GLFWwindowposfun = ::std::option::Option<
    unsafe extern "C" fn(window: *mut GLFWwindow, xpos: ffi::c_int, ypos: ffi::c_int),
>;
pub type GLFWwindowsizefun = ::std::option::Option<
    unsafe extern "C" fn(window: *mut GLFWwindow, width: ffi::c_int, height: ffi::c_int),
>;
pub type GLFWwindowclosefun = ::std::option::Option<unsafe extern "C" fn(window: *mut GLFWwindow)>;
pub type GLFWwindowrefreshfun =
    ::std::option::Option<unsafe extern "C" fn(window: *mut GLFWwindow)>;
pub type GLFWwindowfocusfun =
    ::std::option::Option<unsafe extern "C" fn(window: *mut GLFWwindow, focused: ffi::c_int)>;
pub type GLFWwindowiconifyfun =
    ::std::option::Option<unsafe extern "C" fn(window: *mut GLFWwindow, iconified: ffi::c_int)>;
pub type GLFWwindowmaximizefun =
    ::std::option::Option<unsafe extern "C" fn(window: *mut GLFWwindow, maximized: ffi::c_int)>;
pub type GLFWframebuffersizefun = ::std::option::Option<
    unsafe extern "C" fn(window: *mut GLFWwindow, width: ffi::c_int, height: ffi::c_int),
>;
pub type GLFWwindowcontentscalefun =
    ::std::option::Option<unsafe extern "C" fn(window: *mut GLFWwindow, xscale: f32, yscale: f32)>;
pub type GLFWmousebuttonfun = ::std::option::Option<
    unsafe extern "C" fn(
        window: *mut GLFWwindow,
        button: ffi::c_int,
        action: ffi::c_int,
        mods: ffi::c_int,
    ),
>;
pub type GLFWcursorposfun =
    ::std::option::Option<unsafe extern "C" fn(window: *mut GLFWwindow, xpos: f64, ypos: f64)>;
pub type GLFWcursorenterfun =
    ::std::option::Option<unsafe extern "C" fn(window: *mut GLFWwindow, entered: ffi::c_int)>;
pub type GLFWscrollfun = ::std::option::Option<
    unsafe extern "C" fn(window: *mut GLFWwindow, xoffset: f64, yoffset: f64),
>;
pub type GLFWkeyfun = ::std::option::Option<
    unsafe extern "C" fn(
        window: *mut GLFWwindow,
        key: ffi::c_int,
        scancode: ffi::c_int,
        action: ffi::c_int,
        mods: ffi::c_int,
    ),
>;
pub type GLFWcharfun =
    ::std::option::Option<unsafe extern "C" fn(window: *mut GLFWwindow, codepoint: ffi::c_uint)>;
pub type GLFWcharmodsfun = ::std::option::Option<
    unsafe extern "C" fn(window: *mut GLFWwindow, codepoint: ffi::c_uint, mods: ffi::c_int),
>;
pub type GLFWdropfun = ::std::option::Option<
    unsafe extern "C" fn(
        window: *mut GLFWwindow,
        path_count: ffi::c_int,
        paths: *mut *const ffi::c_char,
    ),
>;
pub type GLFWmonitorfun =
    ::std::option::Option<unsafe extern "C" fn(monitor: *mut GLFWmonitor, event: ffi::c_int)>;
pub type GLFWjoystickfun =
    ::std::option::Option<unsafe extern "C" fn(jid: ffi::c_int, event: ffi::c_int)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct GLFWvidmode {
    pub width: ffi::c_int,
    pub height: ffi::c_int,
    pub redBits: ffi::c_int,
    pub greenBits: ffi::c_int,
    pub blueBits: ffi::c_int,
    pub refreshRate: ffi::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct GLFWgammaramp {
    pub red: *mut ffi::c_ushort,
    pub green: *mut ffi::c_ushort,
    pub blue: *mut ffi::c_ushort,
    pub size: ffi::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct GLFWimage {
    pub width: ffi::c_int,
    pub height: ffi::c_int,
    pub pixels: *mut ffi::c_uchar,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct GLFWgamepadstate {
    pub buttons: [ffi::c_uchar; 15usize],
    pub axes: [f32; 6usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct GLFWallocator {
    pub allocate: GLFWallocatefun,
    pub reallocate: GLFWreallocatefun,
    pub deallocate: GLFWdeallocatefun,
    pub user: *mut ffi::c_void,
}
impl Key {
    pub const Last: Key = Key::Menu;
}
#[repr(i32)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub enum Key {
    Unknown = -1,
    Space = 32,
    Apostrophe = 39,
    Comma = 44,
    Minus = 45,
    Period = 46,
    Slash = 47,
    D0 = 48,
    D1 = 49,
    D2 = 50,
    D3 = 51,
    D4 = 52,
    D5 = 53,
    D6 = 54,
    D7 = 55,
    D8 = 56,
    D9 = 57,
    Semicolon = 59,
    Equal = 61,
    A = 65,
    B = 66,
    C = 67,
    D = 68,
    E = 69,
    F = 70,
    G = 71,
    H = 72,
    I = 73,
    J = 74,
    K = 75,
    L = 76,
    M = 77,
    N = 78,
    O = 79,
    P = 80,
    Q = 81,
    R = 82,
    S = 83,
    T = 84,
    U = 85,
    V = 86,
    W = 87,
    X = 88,
    Y = 89,
    Z = 90,
    LeftBracket = 91,
    Backslash = 92,
    RightBracket = 93,
    GraveAccent = 96,
    World1 = 161,
    World2 = 162,
    Escape = 256,
    Enter = 257,
    Tab = 258,
    Backspace = 259,
    Insert = 260,
    Delete = 261,
    Right = 262,
    Left = 263,
    Down = 264,
    Up = 265,
    PageUp = 266,
    PageDown = 267,
    Home = 268,
    End = 269,
    CapsLock = 280,
    ScrollLock = 281,
    NumLock = 282,
    PrintScreen = 283,
    Pause = 284,
    F1 = 290,
    F2 = 291,
    F3 = 292,
    F4 = 293,
    F5 = 294,
    F6 = 295,
    F7 = 296,
    F8 = 297,
    F9 = 298,
    F10 = 299,
    F11 = 300,
    F12 = 301,
    F13 = 302,
    F14 = 303,
    F15 = 304,
    F16 = 305,
    F17 = 306,
    F18 = 307,
    F19 = 308,
    F20 = 309,
    F21 = 310,
    F22 = 311,
    F23 = 312,
    F24 = 313,
    F25 = 314,
    Kp0 = 320,
    Kp1 = 321,
    Kp2 = 322,
    Kp3 = 323,
    Kp4 = 324,
    Kp5 = 325,
    Kp6 = 326,
    Kp7 = 327,
    Kp8 = 328,
    Kp9 = 329,
    KpDecimal = 330,
    KpDivide = 331,
    KpMultiply = 332,
    KpSubtract = 333,
    KpAdd = 334,
    KpEnter = 335,
    KpEqual = 336,
    LeftShift = 340,
    LeftControl = 341,
    LeftAlt = 342,
    LeftSuper = 343,
    RightShift = 344,
    RightControl = 345,
    RightAlt = 346,
    RightSuper = 347,
    Menu = 348,
}
unsafe extern "C" {
    pub fn glfwInit() -> ffi::c_int;
    pub fn glfwTerminate();
    pub fn glfwInitHint(hint: ffi::c_int, value: ffi::c_int);
    pub fn glfwInitAllocator(allocator: *const GLFWallocator);
    pub fn glfwGetVersion(major: *mut ffi::c_int, minor: *mut ffi::c_int, rev: *mut ffi::c_int);
    pub fn glfwGetVersionString() -> *const ffi::c_char;
    pub fn glfwGetError(description: *mut *const ffi::c_char) -> ffi::c_int;
    pub fn glfwSetErrorCallback(callback: GLFWerrorfun) -> GLFWerrorfun;
    pub fn glfwGetPlatform() -> ffi::c_int;
    pub fn glfwPlatformSupported(platform: ffi::c_int) -> ffi::c_int;
    pub fn glfwGetMonitors(count: *mut ffi::c_int) -> *mut *mut GLFWmonitor;
    pub fn glfwGetPrimaryMonitor() -> *mut GLFWmonitor;
    pub fn glfwGetMonitorPos(
        monitor: *mut GLFWmonitor,
        xpos: *mut ffi::c_int,
        ypos: *mut ffi::c_int,
    );
    pub fn glfwGetMonitorWorkarea(
        monitor: *mut GLFWmonitor,
        xpos: *mut ffi::c_int,
        ypos: *mut ffi::c_int,
        width: *mut ffi::c_int,
        height: *mut ffi::c_int,
    );
    pub fn glfwGetMonitorPhysicalSize(
        monitor: *mut GLFWmonitor,
        widthMM: *mut ffi::c_int,
        heightMM: *mut ffi::c_int,
    );
    pub fn glfwGetMonitorContentScale(
        monitor: *mut GLFWmonitor,
        xscale: *mut f32,
        yscale: *mut f32,
    );
    pub fn glfwGetMonitorName(monitor: *mut GLFWmonitor) -> *const ffi::c_char;
    pub fn glfwSetMonitorUserPointer(monitor: *mut GLFWmonitor, pointer: *mut ffi::c_void);
    pub fn glfwGetMonitorUserPointer(monitor: *mut GLFWmonitor) -> *mut ffi::c_void;
    pub fn glfwSetMonitorCallback(callback: GLFWmonitorfun) -> GLFWmonitorfun;
    pub fn glfwGetVideoModes(
        monitor: *mut GLFWmonitor,
        count: *mut ffi::c_int,
    ) -> *const GLFWvidmode;
    pub fn glfwGetVideoMode(monitor: *mut GLFWmonitor) -> *const GLFWvidmode;
    pub fn glfwSetGamma(monitor: *mut GLFWmonitor, gamma: f32);
    pub fn glfwGetGammaRamp(monitor: *mut GLFWmonitor) -> *const GLFWgammaramp;
    pub fn glfwSetGammaRamp(monitor: *mut GLFWmonitor, ramp: *const GLFWgammaramp);
    pub fn glfwDefaultWindowHints();
    pub fn glfwWindowHint(hint: ffi::c_int, value: ffi::c_int);
    pub fn glfwWindowHintString(hint: ffi::c_int, value: *const ffi::c_char);
    pub fn glfwCreateWindow(
        width: ffi::c_int,
        height: ffi::c_int,
        title: *const ffi::c_char,
        monitor: *mut GLFWmonitor,
        share: *mut GLFWwindow,
    ) -> *mut GLFWwindow;
    pub fn glfwDestroyWindow(window: *mut GLFWwindow);
    pub fn glfwWindowShouldClose(window: *mut GLFWwindow) -> ffi::c_int;
    pub fn glfwSetWindowShouldClose(window: *mut GLFWwindow, value: ffi::c_int);
    pub fn glfwGetWindowTitle(window: *mut GLFWwindow) -> *const ffi::c_char;
    pub fn glfwSetWindowTitle(window: *mut GLFWwindow, title: *const ffi::c_char);
    pub fn glfwSetWindowIcon(window: *mut GLFWwindow, count: ffi::c_int, images: *const GLFWimage);
    pub fn glfwGetWindowPos(window: *mut GLFWwindow, xpos: *mut ffi::c_int, ypos: *mut ffi::c_int);
    pub fn glfwSetWindowPos(window: *mut GLFWwindow, xpos: ffi::c_int, ypos: ffi::c_int);
    pub fn glfwGetWindowSize(
        window: *mut GLFWwindow,
        width: *mut ffi::c_int,
        height: *mut ffi::c_int,
    );
    pub fn glfwSetWindowSizeLimits(
        window: *mut GLFWwindow,
        minwidth: ffi::c_int,
        minheight: ffi::c_int,
        maxwidth: ffi::c_int,
        maxheight: ffi::c_int,
    );
    pub fn glfwSetWindowAspectRatio(window: *mut GLFWwindow, numer: ffi::c_int, denom: ffi::c_int);
    pub fn glfwSetWindowSize(window: *mut GLFWwindow, width: ffi::c_int, height: ffi::c_int);
    pub fn glfwGetFramebufferSize(
        window: *mut GLFWwindow,
        width: *mut ffi::c_int,
        height: *mut ffi::c_int,
    );
    pub fn glfwGetWindowFrameSize(
        window: *mut GLFWwindow,
        left: *mut ffi::c_int,
        top: *mut ffi::c_int,
        right: *mut ffi::c_int,
        bottom: *mut ffi::c_int,
    );
    pub fn glfwGetWindowContentScale(window: *mut GLFWwindow, xscale: *mut f32, yscale: *mut f32);
    pub fn glfwGetWindowOpacity(window: *mut GLFWwindow) -> f32;
    pub fn glfwSetWindowOpacity(window: *mut GLFWwindow, opacity: f32);
    pub fn glfwIconifyWindow(window: *mut GLFWwindow);
    pub fn glfwRestoreWindow(window: *mut GLFWwindow);
    pub fn glfwMaximizeWindow(window: *mut GLFWwindow);
    pub fn glfwShowWindow(window: *mut GLFWwindow);
    pub fn glfwHideWindow(window: *mut GLFWwindow);
    pub fn glfwFocusWindow(window: *mut GLFWwindow);
    pub fn glfwRequestWindowAttention(window: *mut GLFWwindow);
    pub fn glfwGetWindowMonitor(window: *mut GLFWwindow) -> *mut GLFWmonitor;
    pub fn glfwSetWindowMonitor(
        window: *mut GLFWwindow,
        monitor: *mut GLFWmonitor,
        xpos: ffi::c_int,
        ypos: ffi::c_int,
        width: ffi::c_int,
        height: ffi::c_int,
        refreshRate: ffi::c_int,
    );
    pub fn glfwGetWindowAttrib(window: *mut GLFWwindow, attrib: ffi::c_int) -> ffi::c_int;
    pub fn glfwSetWindowAttrib(window: *mut GLFWwindow, attrib: ffi::c_int, value: ffi::c_int);
    pub fn glfwSetWindowUserPointer(window: *mut GLFWwindow, pointer: *mut ffi::c_void);
    pub fn glfwGetWindowUserPointer(window: *mut GLFWwindow) -> *mut ffi::c_void;
    pub fn glfwSetWindowPosCallback(
        window: *mut GLFWwindow,
        callback: GLFWwindowposfun,
    ) -> GLFWwindowposfun;
    pub fn glfwSetWindowSizeCallback(
        window: *mut GLFWwindow,
        callback: GLFWwindowsizefun,
    ) -> GLFWwindowsizefun;
    pub fn glfwSetWindowCloseCallback(
        window: *mut GLFWwindow,
        callback: GLFWwindowclosefun,
    ) -> GLFWwindowclosefun;
    pub fn glfwSetWindowRefreshCallback(
        window: *mut GLFWwindow,
        callback: GLFWwindowrefreshfun,
    ) -> GLFWwindowrefreshfun;
    pub fn glfwSetWindowFocusCallback(
        window: *mut GLFWwindow,
        callback: GLFWwindowfocusfun,
    ) -> GLFWwindowfocusfun;
    pub fn glfwSetWindowIconifyCallback(
        window: *mut GLFWwindow,
        callback: GLFWwindowiconifyfun,
    ) -> GLFWwindowiconifyfun;
    pub fn glfwSetWindowMaximizeCallback(
        window: *mut GLFWwindow,
        callback: GLFWwindowmaximizefun,
    ) -> GLFWwindowmaximizefun;
    pub fn glfwSetFramebufferSizeCallback(
        window: *mut GLFWwindow,
        callback: GLFWframebuffersizefun,
    ) -> GLFWframebuffersizefun;
    pub fn glfwSetWindowContentScaleCallback(
        window: *mut GLFWwindow,
        callback: GLFWwindowcontentscalefun,
    ) -> GLFWwindowcontentscalefun;
    pub fn glfwPollEvents();
    pub fn glfwWaitEvents();
    pub fn glfwWaitEventsTimeout(timeout: f64);
    pub fn glfwPostEmptyEvent();
    pub fn glfwGetInputMode(window: *mut GLFWwindow, mode: ffi::c_int) -> ffi::c_int;
    pub fn glfwSetInputMode(window: *mut GLFWwindow, mode: ffi::c_int, value: ffi::c_int);
    pub fn glfwRawMouseMotionSupported() -> ffi::c_int;
    pub fn glfwGetKeyName(key: ffi::c_int, scancode: ffi::c_int) -> *const ffi::c_char;
    pub fn glfwGetKeyScancode(key: ffi::c_int) -> ffi::c_int;
    pub fn glfwGetKey(window: *mut GLFWwindow, key: ffi::c_int) -> ffi::c_int;
    pub fn glfwGetMouseButton(window: *mut GLFWwindow, button: ffi::c_int) -> ffi::c_int;
    pub fn glfwGetCursorPos(window: *mut GLFWwindow, xpos: *mut f64, ypos: *mut f64);
    pub fn glfwSetCursorPos(window: *mut GLFWwindow, xpos: f64, ypos: f64);
    pub fn glfwCreateCursor(
        image: *const GLFWimage,
        xhot: ffi::c_int,
        yhot: ffi::c_int,
    ) -> *mut GLFWcursor;
    pub fn glfwCreateStandardCursor(shape: ffi::c_int) -> *mut GLFWcursor;
    pub fn glfwDestroyCursor(cursor: *mut GLFWcursor);
    pub fn glfwSetCursor(window: *mut GLFWwindow, cursor: *mut GLFWcursor);
    pub fn glfwSetKeyCallback(window: *mut GLFWwindow, callback: GLFWkeyfun) -> GLFWkeyfun;
    pub fn glfwSetCharCallback(window: *mut GLFWwindow, callback: GLFWcharfun) -> GLFWcharfun;
    pub fn glfwSetCharModsCallback(
        window: *mut GLFWwindow,
        callback: GLFWcharmodsfun,
    ) -> GLFWcharmodsfun;
    pub fn glfwSetMouseButtonCallback(
        window: *mut GLFWwindow,
        callback: GLFWmousebuttonfun,
    ) -> GLFWmousebuttonfun;
    pub fn glfwSetCursorPosCallback(
        window: *mut GLFWwindow,
        callback: GLFWcursorposfun,
    ) -> GLFWcursorposfun;
    pub fn glfwSetCursorEnterCallback(
        window: *mut GLFWwindow,
        callback: GLFWcursorenterfun,
    ) -> GLFWcursorenterfun;
    pub fn glfwSetScrollCallback(window: *mut GLFWwindow, callback: GLFWscrollfun)
    -> GLFWscrollfun;
    pub fn glfwSetDropCallback(window: *mut GLFWwindow, callback: GLFWdropfun) -> GLFWdropfun;
    pub fn glfwJoystickPresent(jid: ffi::c_int) -> ffi::c_int;
    pub fn glfwGetJoystickAxes(jid: ffi::c_int, count: *mut ffi::c_int) -> *const f32;
    pub fn glfwGetJoystickButtons(jid: ffi::c_int, count: *mut ffi::c_int) -> *const ffi::c_uchar;
    pub fn glfwGetJoystickHats(jid: ffi::c_int, count: *mut ffi::c_int) -> *const ffi::c_uchar;
    pub fn glfwGetJoystickName(jid: ffi::c_int) -> *const ffi::c_char;
    pub fn glfwGetJoystickGUID(jid: ffi::c_int) -> *const ffi::c_char;
    pub fn glfwSetJoystickUserPointer(jid: ffi::c_int, pointer: *mut ffi::c_void);
    pub fn glfwGetJoystickUserPointer(jid: ffi::c_int) -> *mut ffi::c_void;
    pub fn glfwJoystickIsGamepad(jid: ffi::c_int) -> ffi::c_int;
    pub fn glfwSetJoystickCallback(callback: GLFWjoystickfun) -> GLFWjoystickfun;
    pub fn glfwUpdateGamepadMappings(string: *const ffi::c_char) -> ffi::c_int;
    pub fn glfwGetGamepadName(jid: ffi::c_int) -> *const ffi::c_char;
    pub fn glfwGetGamepadState(jid: ffi::c_int, state: *mut GLFWgamepadstate) -> ffi::c_int;
    pub fn glfwSetClipboardString(window: *mut GLFWwindow, string: *const ffi::c_char);
    pub fn glfwGetClipboardString(window: *mut GLFWwindow) -> *const ffi::c_char;
    pub fn glfwGetTime() -> f64;
    pub fn glfwSetTime(time: f64);
    pub fn glfwGetTimerValue() -> u64;
    pub fn glfwGetTimerFrequency() -> u64;
    pub fn glfwMakeContextCurrent(window: *mut GLFWwindow);
    pub fn glfwGetCurrentContext() -> *mut GLFWwindow;
    pub fn glfwSwapBuffers(window: *mut GLFWwindow);
    pub fn glfwSwapInterval(interval: ffi::c_int);
    pub fn glfwExtensionSupported(extension: *const ffi::c_char) -> ffi::c_int;
    pub fn glfwGetProcAddress(procname: *const ffi::c_char) -> GLFWglproc;
    pub fn glfwVulkanSupported() -> ffi::c_int;
    pub fn glfwGetRequiredInstanceExtensions(count: *mut u32) -> *mut *const ffi::c_char;
}
